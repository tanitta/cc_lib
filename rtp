--Rednet Transfar Protocol Library--
local ver="RednetTransfarProtocol ver0.9"
local ver2="RTP0.9"
function version()
	print(ver)
end
getResponse=function(timeout)
	timeout=timeout or 1
	local response={}
	local n=parallel.waitForAny(
		function()
			response={os.pullEvent("modem_message")}
		end,
		function()
			sleep(timeout)
		end
	)
	if n==1 then
		return true,response
	else
		return false,"no response"
	end
end

function newServer(side,address)
	obj={}
	obj.modem=peripheral.wrap(side)
	obj.side=side
	obj.address=address
	obj.name=os.getComputerLabel() or "Anonymous"
	obj.modem.open(address)
	obj.DNS={10,11}
	obj.newStatus=function(self,to,port,message,code)
		local status={}
		status.version=ver2
		status.to=to
		status.message=message
		status.port=port
		status.name=self.name
		status.from=self.address
		status.code=code or 200 
		return status
	end
	obj.open=function(self,...)
		local a={...}
		for i,v in ipairs(a) do
			self.modem.open(v)
		end
	end
	obj.close=function(self,...)
		local a={...}
		for i,v in ipairs(a) do
			self.modem.close(v)
		end
	end
	obj.closeAll=function(self)
		self.modem.closeAll()
	end
	obj.ping=function(self,to,timeout)
		self:transmit(to,0,"ping")
		return getResponse(timeout)
	end
	obj.findNearestHost=function(self)
		local host
		local b,t=self:ping(0)
		if b then
			host=t
			for i=1,10 do
				b,t=getResponse()
				if b then
					if t[6]<host[6] then
						host=t
					end
				else
					break
				end
			end
			return true,host
		else
			return false,"no found host"
		end
	end
	obj.transmit=function(self,to,port,message,code)
		if type(to)=="string" then
			to=self:lookup(to)
		end
		if to~=nil then
			local status=self:newStatus(to,port,message,code)
			if to>100 and math.floor(to/100)*100~=self.address then
				to=math.floor(to/100)*100
			end
			self.modem.transmit(to,self.address,status)
		else
			print("transmission failure")
		end
	end
	obj.transfar=function(self,status)
		local to=status.to
		if to>100 and math.floor(to/100)*100~=self.address then
			to=math.floor(to/100)*100
		end
		self.modem.transmit(to,status.from,status)
	end
	obj.setDNS=function(self,DNS1,DNS2)
		self.DNS={DNS1 or self.DNS[1],DNS2 or self.DNS[2]}
	end
	obj.lookup=function(self,name)
		for i=1,2 do
			local DNS=self.DNS[i]
			local t={"lookup",name}
			self:transmit(DNS,0,t)
			local a,b=getResponse()
			if a then
				if type(b.message)==number then
					return b.message
				end
			end
		end
		return nil
	end
	obj.isToMe=function(self,status)
		local to=status.to
		if to==0 or to==99 then
			return true
		end
		return to==self.address
	end
	return obj
end
function newClient(side)
	local obj=newServer(side,65000)
	obj.host={address=0,name=""}
	obj.address=65000
	obj.transmit=function(self,to,port,message,code)
		if type(to)=="string" then
			to=self:lookup(to)
		end
		if to~=nil then
			local status=self:newStatus(to,port,message,code)
			self.modem.transmit(self.host.address,self.address,status)
		else
			print("transmission failure")
		end
	end
	obj.getAddress=function(self)
		self:close(self.address)
		self.address=65000
		self:open(65000)
		self.host={address=0,name=""}
		local b,t=self:findNearestHost()
		if b then
			self:transmit(t[4],0,"assign address")
			local b,t=getResponse()
			if b then
				self.address=t[5].message
				self.host.address=t[5].from
				self.host.name=t[5].name
				self:close(65000)
				self:open(self.address)
				return true,self.address
			end
		else
			return false,"failed"
		end
	end
	obj.isToMe=function(self,status)
		local to=status.to
		if to==99 then
			return true
		end
		return to==self.address
	end
	return obj
end